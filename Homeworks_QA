______________11111_________________________________Первое ДЗ_______________________________11111____________________________________ 
Linux terminal (GitBash) commands

1) Посмотреть где я
2) Создать папку
3) Зайти в папку
4) Создать 3 папки
5) Зайти в любоую папку
6) Создать 5 файлов (3 txt, 2 json)
7) Создать 3 папки
8. Вывести список содержимого папки
9) + Открыть любой txt файл
10) + написать туда что-нибудь, любой текст.
11) + сохранить и выйти.
12) Выйти из папки на уровень выше
—
13) переместить любые 2 файла, которые вы создали, в любую другую папку.
14) скопировать любые 2 файла, которые вы создали, в любую другую папку.
15) Найти файл по имени
16) просмотреть содержимое в реальном времени (команда grep) изучите как она работает.
17) вывести несколько первых строк из текстового файла
18) вывести несколько последних строк из текстового файла
19) просмотреть содержимое длинного файла (команда less) изучите как она работает.
20) вывести дату и время
=========

Задание *
1) Отправить http запрос на сервер.
http://162.55.220.72:5005/terminal-hw-request
2) Написать скрипт который выполнит автоматически пункты 3, 4, 5, 6, 7, 8, 13

=====================
1) Посмотреть где я - pwd
2) Создать папку - mkdir foldername
3) Зайти в папку - cd foldername



____________________2222_______________________________________GIT Homework 1__________________________2222__________________________________

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.


Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON.
 5. Клонировать репозиторий JSON на локальный компьютер.
 6. Внутри локального JSON создать файл “new.json”.
 7. Добавить файл под гит.
 8. Закоммитить файл.
 9. Отправить файл на внешний GitHub репозиторий.
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
 11. Отправить изменения на внешний репозиторий.
 12. Создать файл preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
 15. Отправить сразу 2 файла на внешний репозиторий.
 16. На веб интерфейсе создать файл bug_report.json.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 20. Синхронизировать внешний и локальный репозиторий JSON


XML
 21. Создать внешний репозиторий c названием XML.
 22. Клонировать репозиторий XML на локальный компьютер.
 23. Внутри локального XML создать файл “new.xml”.
 24. Добавить файл под гит.
 25. Закоммитить файл.
 26. Отправить файл на внешний GitHub репозиторий.
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
 28. Отправить изменения на внешний репозиторий.
 29. Создать файл preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 32. Сделать коммит в одну строку.
 33. Отправить сразу 2 файла на внешний репозиторий.
 34. На веб интерфейсе создать файл bug_report.xml.
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 38. Синхронизировать внешний и локальный репозиторий XML


_______________33333________________________________________GitHub. HW_2_______________________33333______________________________________
1. На локальном репозитории сделать ветки для:
- Postman
- Jmeter
- CheckLists
- Bag Reports
- SQL
- Charles
- Mobile testing

2. Запушить все ветки на внешний репозиторий
3. В ветке Bag Reports сделать текстовый документ со структурой баг репорта
4. Запушить структуру багрепорта на внешний репозиторий
5. Вмержить ветку Bag Reports в Main
6. Запушить main на внешний репозиторий.
7. В ветке CheckLists набросать структуру чек листа.
8. Запушить структуру на внешний репозиторий
9. На внешнем репозитории сделать Pull Request ветки CheckLists в main
10. Синхронизировать Внешнюю и Локальную ветки Main

